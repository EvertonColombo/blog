[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "On Skin Lesion Recognition using fast.ai\n\n\n\n\n\n\n\nfastai\n\n\nskin\n\n\ncomputer vision\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2023\n\n\nEverton Eduardo Colombo\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/skin-lesion/Skin Lesion Recognition using fastai.html",
    "href": "posts/skin-lesion/Skin Lesion Recognition using fastai.html",
    "title": "On Skin Lesion Recognition using fast.ai",
    "section": "",
    "text": "On Skin Lesion Recognition using fast.ai\nMy homework from the course Walk with fastai.\nDemo\nDataset\nThis notebook was inspired by the work of D Mery, P Romero, G Garib, A Pedro, MP Salinas, J Sepulveda, L Hidalgo, C Prieto, C Navarrete-Dechent (2022): On Skin Lesion Recognition using Deep Learning: 50 Ways to Choose Your Model, Pacific-Rim Symposium on Image and Video Technology (PSIVT 2022).\n\npath = '/content/images'\nfnames = get_image_files(path)\npat = r'(.+)_\\d+.jpg$'\nbatch_tfms = [*aug_transforms(size=224, max_warp=0), Normalize.from_stats(*imagenet_stats)]\nitem_tfms = RandomResizedCrop(460, min_scale=0.75, ratio=(1.,1.))\nbs=64\n\nskin = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n     get_items=get_image_files,\n     splitter=RandomSplitter(valid_pct = 0.10),\n     get_y=parent_label,\n     item_tfms=item_tfms,\n     batch_tfms=batch_tfms\n)\ndls = skin.dataloaders(path, bs=bs)\n\n\nim = PILImage.create(fnames[0])\nim\n\n\n\n\n\nRandomResizedCrop(460, min_scale=0.75, ratio=(1.,1.))(im)\n\n\n\n\n\ndls.vocab\n\n['class_0', 'class_1', 'class_2', 'class_3', 'class_4', 'class_5', 'class_6']\n\n\n\nsplitter=RandomSplitter(valid_pct = 0.10)\n\n\nt, v = splitter(fnames)\nlen(t), len(v)\n\n(7560, 840)\n\n\n\ndls.show_batch(max_n=9, figsize=(15,10))\n\n\n\n\n\nlearn = vision_learner(dls, 'vit_base_patch16_224', loss_func=LabelSmoothingCrossEntropy(), metrics=accuracy)\n\n\nlearn.lr_find()\n\n\n\n\n\n\n\n\nSuggestedLRs(valley=0.0005754399462603033)\n\n\n\n\n\n\nlearn.fine_tune(15, 1e-2, cbs=[ShowGraphCallback()])\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      accuracy\n      time\n    \n  \n  \n    \n      0\n      1.418031\n      0.984517\n      0.759524\n      03:06\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      epoch\n      train_loss\n      valid_loss\n      accuracy\n      time\n    \n  \n  \n    \n      0\n      0.935718\n      0.734683\n      0.885714\n      04:11\n    \n    \n      1\n      0.777893\n      0.716826\n      0.879762\n      04:11\n    \n    \n      2\n      0.729576\n      0.743558\n      0.897619\n      04:12\n    \n    \n      3\n      0.681908\n      0.642232\n      0.926190\n      04:12\n    \n    \n      4\n      0.642097\n      0.682587\n      0.894048\n      04:11\n    \n    \n      5\n      0.575158\n      0.593762\n      0.948810\n      04:11\n    \n    \n      6\n      0.541295\n      0.554454\n      0.960714\n      04:12\n    \n    \n      7\n      0.518201\n      0.548492\n      0.963095\n      04:11\n    \n    \n      8\n      0.499045\n      0.539659\n      0.965476\n      04:11\n    \n    \n      9\n      0.484600\n      0.541597\n      0.961905\n      04:11\n    \n    \n      10\n      0.471218\n      0.531073\n      0.963095\n      04:12\n    \n    \n      11\n      0.465571\n      0.490690\n      0.979762\n      04:11\n    \n    \n      12\n      0.460954\n      0.489942\n      0.983333\n      04:11\n    \n    \n      13\n      0.460169\n      0.483883\n      0.983333\n      04:12\n    \n    \n      14\n      0.459116\n      0.485417\n      0.983333\n      04:12\n    \n  \n\n\n\n\n\n\n\ninterp.print_classification_report()\n\n\n\n\n\n\n\n\n              precision    recall  f1-score   support\n\n     class_0       1.00      1.00      1.00       126\n     class_1       0.99      1.00      1.00       105\n     class_2       0.97      1.00      0.99       107\n     class_3       1.00      1.00      1.00       145\n     class_4       0.95      0.97      0.96       115\n     class_5       0.97      0.90      0.93       107\n     class_6       0.99      1.00      1.00       135\n\n    accuracy                           0.98       840\n   macro avg       0.98      0.98      0.98       840\nweighted avg       0.98      0.98      0.98       840\n\n\n\n\ninterp.show_results(1)\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.plot_top_losses(9, figsize=(15,10))\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.plot_confusion_matrix(figsize=(12,12), dpi=60)\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.most_confused(min_val=3)\n\n\n\n\n\n\n\n\n[('class_5', 'class_4', 6),\n ('class_4', 'class_5', 3),\n ('class_5', 'class_2', 3)]\n\n\n\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_true = targets, y_pred = predicted_labels)\n\n0.8571428571428571\n\n\n\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import ConfusionMatrixDisplay\n\ncm = ConfusionMatrixDisplay.from_predictions(y_true = targets, y_pred = predicted_labels, display_labels = dls.vocab)\nfig = cm.figure_\nfig.set_figwidth(12)\nfig.set_figheight(12)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]